# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Start an HTTP server from a directory, optionally specifying the port
function www() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

function ramdisk() {
  # usage: create_ramdisk ramdisk_name size_in_kb
  # e.g. "create_ramdisk ramdisk 4096" will create a 4GB ramdisk.
  #let ramsize=$2*2048;
  #diskutil erasevolume HFS+ $1 `hdiutil attach -nomount ram://$ramsize`;
  if ! test -e /Volumes/ramdisk ; then
    diskutil erasevolume HFS+ ramdisk `hdiutil attach -nomount ram://$((20*1024*1024*2))`;
  else
    echo "ramdisk exists already!"
  fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# fd - cd to selected directory
function fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
  	-o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

function gf() {
  preview="git diff $@ --color=always -- {-1}"
  git diff $@ --name-only | fzf -m --ansi --preview $preview
}

function reduce() {
  local remove_source=false
  local files=()

  # Parse arguments
  for arg in "$@"; do
    if [[ "$arg" == "-r" ]]; then
      remove_source=true
    else
      files+=("$arg")
    fi
  done

  # If no files provided, search for all HEIC files (case-insensitive)
  if [[ ${#files[@]} -eq 0 ]]; then
    files=( *.(#i)heic(N) )
  fi

  # Process each file
  for file in "${files[@]}"; do
    if [[ -f "$file" ]]; then
      width=$(sips -g pixelWidth "$file" | awk '/pixelWidth:/ {printf "%d", $2 * 0.5}')
      height=$(sips -g pixelHeight "$file" | awk '/pixelHeight:/ {printf "%d", $2 * 0.5}')
      sips -s format jpeg -s formatOptions 80 --resampleWidth "$width" --resampleHeight "$height" "$file" --out "${file%.*}.jpg"

      if [[ "$remove_source" == true ]]; then
        rm "$file"
      fi
    else
      echo "File not found: $file"
    fi
  done
}

# # Only list out directory > 300M and sort them
# function fss() {
#   if du -b /dev/null > /dev/null 2>&1; then
#     local arg=-sbh
#   else
#     local arg=-sh
#   fi
#   if [[ -n "$@" ]]; then
#     du $arg -- "$@" | grep  "[0-9]G\|[0-9]\{1\}M" | sort -rh
#   else
#     du $arg .[^.]* * | grep  "[0-9]G\|[0-9]\{1\}M" | sort -rh
#   fi
# }
